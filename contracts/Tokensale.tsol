pragma ever-solidity >= 0.61.2;
pragma AbiHeader expire;
pragma AbiHeader pubkey;

import "tip3/contracts/interfaces/IAcceptTokensTransferCallback.sol";
import "tip3/contracts/interfaces/ITokenRoot.sol";
import "tip3/contracts/interfaces/ITokenWallet.sol";

contract Tokensale {
    uint16 static _nonce;
    address static _owner;

    address public _distributedTokenRoot; // TIP3 TokenRoot address for deploying wallet for Tokensale. This token will be distributed
    address public _distributedTokenWallet; // TIP3 wallet for Tokensale for sending purchased tokens
    uint256 public _supply; // How much tokens will be distributed (with decimals)
    uint128 public _rate; // How much tokens buyer will receive for 1 nanovenom (1*10^9)

    constructor(
        address distributedTokenRoot,
        uint256 supply,
        uint128 rate,
        address sendRemainingGasTo
        ) public {
        tvm.accept(); // This action is required to process external messages that bring no value - deploy as we have.
        tvm.rawReserve(1 ever, 0);// we will always reserve 1 venom on this contract
        _distributedTokenRoot = distributedTokenRoot ;
        _rate =  rate;
        _supply = supply ;

        /**
         @dev deploy smart contract own wallet to operate with as recommended by tip3 spec
         */
         ITokenRoot(distributedTokenRoot).deployWallet {
            value: 0.2 ever,
            flag: 1,
            callback: Tokensale.onTokenWallet // this callback will be called by tokenRoot after deploying wallet for token sale
         }(
            address(this),
            0.1 ever
         );
         // send remaining gaz after setup;
         sendRemainingGasTo.transfer({value: 0, flag: 128, bounce: false});

    }
    
    /**
    @dev onTokenWallet callback function
    @param value, address of token wallet
     */
    function onTokenWallet(address value) external {
        require(msg.sender.value !=0  && msg.sender == _distributedTokenRoot, 101);
        tvm.rawReserve(1 ever, 0);
        _distributedTokenWallet = value;
        _owner.transfer({value: 0, flag: 128, bounce: false});
    }
    
    /**
    @dev buyTokens to sell tokens to buyer
    @param amount , amount of ever sent via this function
    will be used to calculate amount of tokens to send to buyer
     */
     function buyTokens(uint128 amount) external view {
        tvm.rawReserve(1 ever, 0);
        if(amount > msg.value + 1 ever) {
            msg.sender.transfer({value: 0, flag: 128, bounce: false});
        } else {
            uint128 purchase = _rate * amount;
            if(purchase > _supply) {
                msg.sender.transfer({value: 0, flag: 128, bounce: false});
            } else {
                TvmCell empty;
                ITokenWallet(_distributedTokenWallet).transfer{value: 0, flag: 128}(
                    purchase,
                    msg.sender,
                    0.1 ever, //deploy wallet for user if not deployed already, fee will be payed by user
                    msg.sender,
                    false,
                    empty
                );
            }
        }
     }

}